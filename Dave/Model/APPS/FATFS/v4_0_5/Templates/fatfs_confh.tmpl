package Model.APPS.FATFS.v4_0_5.Templates;

import Model.APPS.FATFS.v4_0_5.FATFS

out.print("""
/**
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-12-10:
 *     - Initial version<br>
 *
 * @endcond
 *
 */

#ifndef FATFS_CONF_H
#define FATFS_CONF_H

/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/

/**********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/
#define CP_0  437    // - U.S. 
#define CP_1  720    // - Arabic
#define CP_2  737    // - Greek
#define CP_3  771    // - KBL
#define CP_4  775    // - Baltic
#define CP_5  850    // - Latin 1
#define CP_6  852    // - Latin 2
#define CP_7  855    // - Cyrillic
#define CP_8  857    // - Turkish
#define CP_9  860    // - Portugese
#define CP_10  861   // - Icelandic
#define CP_11  862   // - Hebrew
#define CP_12  863   // - Canadian French
#define CP_13  864   // - Arabic
#define CP_14  865   // - Nordic
#define CP_15  866   // - Russian
#define CP_16  869   // - Greek 2
#define CP_17  932   // - Japanese(DBCS)
#define CP_18  936   // - Simplified Chinese(DBCS)
#define CP_19  949   // - Korean (DBCS)
#define CP_20  950   // - Traditional Chinese(DBCS)
#define CP_21    1   // - ASCII only (No extended character. Non-LFN cfg. only)

""");

String appInst  = null;

for (Object appIns : appInstancesList )
{
	appInst = appIns.getInstanceLabel()
	
	if(appIns.gcheck_stdlib.value == true)
	{
	out.print("""#define FATFS_STANDARDLIBRARY    1\n""");
    }	
	else
	{
	out.print("""#define FATFS_STANDARDLIBRARY    0\n""");
	}
	
	
	if(appIns.gcheck_readonly.value == true)
	{
	out.print("""#define FATFS_READONLY           1\n""");
	out.print("""#define FATFS_LOCK               0\n""")
    }	
	else
	{
	out.print("""#define FATFS_READONLY           0\n""");
	out.print("""#define FATFS_LOCK               ${appIns.ginteger_filesharing.value}\n""")
	}

if(appIns.gcheck_find.value == true)
{
	out.print("""#define FATFS_FIND               1\n""");
}
else
{
	out.print("""#define FATFS_FIND               0\n""");
}

if(appIns.gcheck_mkfs.value == true)
{
	out.print("""#define FATFS_MKFS               1\n""");
}
else
{
	out.print("""#define FATFS_MKFS               0\n""");
}

if(appIns.gcheck_fastseek.value == true)
{
	out.print("""#define FATFS_FASTSEEK           1\n""");
}
else
{
	out.print("""#define FATFS_FASTSEEK           0\n""");
}

if(appIns.gcheck_vollabel.value == true)
{
	out.print("""#define FATFS_LABEL              1\n""");
}
else
{
	out.print("""#define FATFS_LABEL              0\n""");
}

if(appIns.gcheck_forward.value == true)
{
	out.print("""#define FATFS_FORWARD            1\n""");
}
else
{
	out.print("""#define FATFS_FORWARD            0\n""");
}
if(appIns.gcheck_multipartition.value == true)
{
	out.print("""#define FATFS_MULTI_PARTITION    1\n""");
}
else
{
	out.print("""#define FATFS_MULTI_PARTITION    0\n""");
}

if(appIns.gcheck_trim.value == true)
{
	out.print("""#define FATFS_TRIM               1\n""");
}
else
{
	out.print("""#define FATFS_TRIM               0\n""");
}


if(appIns.gcheck_tinymode.value == true)
{
	out.print("""#define FATFS_TINY               1\n""");
}
else
{
	out.print("""#define FATFS_TINY               0\n""");
}

if(appIns.gcheck_timestamp.value == true)
{
	out.print("""#define FATFS_NORTC              0\n""");
}
else
{
	out.print("""#define FATFS_NORTC              1\n""");
	out.print("""#define FATFS_NORTC_MON          ${appIns.ginteger_month.value}\n""");
	out.print("""#define FATFS_NORTC_DAY          ${appIns.ginteger_day.value}\n""");
	out.print("""#define FATFS_NORTC_YEAR         ${appIns.ginteger_year.value}\n""");}

if(appIns.gcheck_rtos.value == true)
{
	out.print("""#define FATFS_REENTRANT          1\n""");
	out.print("""#define FATFS_TIMEOUT         ${appIns.ginteger_timeout.value}\n""");
}
else
{
	out.print("""#define FATFS_REENTRANT          0\n""");
}
out.print("""#define FATFS_MIN_LEVEL          ${appIns.gcombo_minlevel.value}\n""");

out.print("""#define FATFS_STRFUNC            ${appIns.gcombo_stringfunc.options.indexOf(appIns.gcombo_stringfunc.value)}\n""");

out.print("""#define FATFS_CODEPAGE           CP_${appIns.gcombo_codepage.options.indexOf(appIns.gcombo_codepage.value)}\n""");

out.print("""#define FATFS_RPATH              ${appIns.gcombo_relativepath.options.indexOf(appIns.gcombo_relativepath.value)}\n""");

out.print("""#define FATFS_VOLUMES            ${appIns.gcombo_volumes.value}\n""");

out.print("""#define FATFS_SECTOR             ${appIns.gcombo_sectorsize.value}\n""");

out.print("""#define FATFS_NOFSINFO           ${appIns.gcombo_filesystem.options.indexOf(appIns.gcombo_filesystem.value)}\n""");

out.print("""#define FATFS_WORDACCESS         ${appIns.gcombo_wordaccess.options.indexOf(appIns.gcombo_wordaccess.value)}\n""");


} // end of for loop

out.print("""
#define FATFS_MAJOR_VERSION (${(FATFS.version).findAll( /\d+/ )*.toInteger()[0]}U)
#define FATFS_MINOR_VERSION (${(FATFS.version).findAll( /\d+/ )*.toInteger()[1]}U)
#define FATFS_PATCH_VERSION (${(FATFS.version).findAll( /\d+/ )*.toInteger()[2]}U)

#endif  /* ifndef FATFS_CONF_H */
""");