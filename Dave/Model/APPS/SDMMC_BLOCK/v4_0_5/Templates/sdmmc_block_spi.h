/**
 * @file sdmmc_block_spi.h
 * @date 2016-01-19
 *
 * NOTE:
 * This file is generated by DAVE. Any manual modification done to this file will be lost when the code is regenerated.
 *
 * @cond
 ***********************************************************************************************************************
 * SDMMC_BLOCK_SPI v4.0.0 - Configures the SPI channel to instance to interface the SDMMC card.
 *
 * Copyright (c) 2016, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2016-01-19:
 *     - Initial version<br>
 *
 * @endcond
 *
 */

#ifndef SDMMC_BLOCK_SPI_H
#define SDMMC_BLOCK_SPI_H

/***********************************************************************************************************************
  * HEADER FILES
**********************************************************************************************************************/

#include "sdmmc_block.h"

/**********************************************************************************************************************
  * MACROS
**********************************************************************************************************************/

#ifdef SDMMC_BLOCK_SPI

/* Commands   */
/* Definitions for MMC/SDC command */
#define SDMMC_BLOCK_SPI_CMD0       (0x40+0)  /* GO_IDLE_STATE */
#define SDMMC_BLOCK_SPI_CMD1       (0x40+1)  /* SEND_OP_COND (MMC) */

#define SDMMC_BLOCK_SPI_CMD8       (0x40+8)  /* SEND_IF_COND */
#define SDMMC_BLOCK_SPI_CMD9       (0x40+9)  /* SEND_CSD */
#define SDMMC_BLOCK_SPI_CMD10      (0x40+10)  /* SEND_CID */
#define SDMMC_BLOCK_SPI_CMD12      (0x40+12)  /* STOP_TRANSMISSION */
#define SDMMC_BLOCK_SPI_CMD13      (0x40+13)  /* SD_STATUS (SDC) */

#define SDMMC_BLOCK_SPI_CMD16      (0x40+16)  /* SET_BLOCKLEN */
#define SDMMC_BLOCK_SPI_CMD17      (0x40+17)  /* READ_SINGLE_BLOCK */
#define SDMMC_BLOCK_SPI_CMD18      (0x40+18)  /* READ_MULTIPLE_BLOCK */
#define SDMMC_BLOCK_SPI_CMD23      (0x40+23)  /* SET_BLOCK_COUNT (MMC) */

#define SDMMC_BLOCK_SPI_CMD24      (0x40+24)  /* WRITE_BLOCK */
#define SDMMC_BLOCK_SPI_CMD25      (0x40+25)  /* WRITE_MULTIPLE_BLOCK */
#define SDMMC_BLOCK_SPI_CMD27      (0x40+27)  /* PROGRAM_CSD */
#define SDMMC_BLOCK_SPI_CMD32      (0x40+32)  /*ERASE_BLOCK_START_ADDR*/
#define SDMMC_BLOCK_SPI_CMD33      (0x40+33)  /*ERASE_BLOCK_END_ADDR*/
#define SDMMC_BLOCK_SPI_CMD38      (0x40+38)  /*ERASE_SELECTED_BLOCKS*/
#define SDMMC_BLOCK_SPI_CMD42      (0x40+42)  /*LOCK_UNLOCK*/

#define SDMMC_BLOCK_SPI_CMD55      (0x40+55)  /* APP_CMD */
#define SDMMC_BLOCK_SPI_CMD58      (0x40+58)  /* READ_OCR */
#define SDMMC_BLOCK_SPI_CMD59      (0x40+59)  /* CRC*/

#define SDMMC_BLOCK_SPI_ACMD13     (0xC0+13)  /* SD_STATUS (SDC) */
#define SDMMC_BLOCK_SPI_ACMD22     (0xC0+22)  /* SEND_NUM_WR_BLOCKS */

#define SDMMC_BLOCK_SPI_ACMD23     (0xC0+23)  /* SET_WR_BLK_ERASE_COUNT (SDC) */
#define SDMMC_BLOCK_SPI_ACMD41     (0x40+41)  /* SEND_OP_COND (SDC) */
#define SDMMC_BLOCK_SPI_ACMD51     (0x40+51)  /* SEND_SCR */
/* End of Commands */

/* Command TimeOut definitions */
#define SDMMC_BLOCK_SPI_CMD_TIMOUT     (8000U)  /* Command Time Out */

#define SDMMC_BLOCK_SPI_CSD_CID_LENGTH      (16U) /* 16 bytes */

/* Other Definitions */
#define SDMMC_BLOCK_SPI_BYTES_PER_SECTOR    ((uint32_t)0x200)  /* Bytes Per Sector */
#define SDMMC_BLOCK_SPI_CRC_BYTES           ((uint32_t)0x2)  /* No of CRC bytes */
#define SDMMC_BLOCK_SPI_DELAY_CLOCK_COUNT   ((uint32_t)0x1)  /* Delay of 8-clock cycles */

#define SDMMC_BLOCK_SPI_OCR_CCS_BITMASK             (0x40U)
#define SDMMC_BLOCK_SPI_CSR_CARD_IS_LOCKED_BITMASK  (0x02U)

/**********************************************************************************************************************
  * ENUMS
**********************************************************************************************************************/

/***********************************************************************************************************************
  * DATA STRUCTURES
***********************************************************************************************************************/

/***********************************************************************************************************************
  * API Prototypes
***********************************************************************************************************************/
#ifdef __cplusplus
extern "C" {
#endif

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_Init(SDMMC_BLOCK_t *const obj);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_CardIdentificationProcess(SDMMC_BLOCK_t *const obj);

SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_SPI_ReadBlock(SDMMC_BLOCK_t *const obj,
                                                    uint8_t *read_buf,
                                                    const uint32_t sector_number,
                                                    const uint32_t sector_count);

SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_SPI_WriteBlock(const SDMMC_BLOCK_t *const obj,
                                                              uint8_t *write_buf,
                                                              const uint32_t sector_number,
                                                              const uint32_t sector_count);

uint8_t SDMMC_BLOCK_SPI_GetState(const SDMMC_BLOCK_t *const obj);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetSectorCount(const SDMMC_BLOCK_t *const obj, uint32_t *sector_count);


SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetBlockSize(const SDMMC_BLOCK_t *const obj, uint32_t *block_size);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetCsd(const SDMMC_BLOCK_t *const obj, void *buffer);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetCid(const SDMMC_BLOCK_t *const obj, void *buffer);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetOcr(const SDMMC_BLOCK_t *const obj, void *buffer);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetSdStatus(const SDMMC_BLOCK_t *const obj, uint8_t *buffer);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetLockStatus(const SDMMC_BLOCK_t *const obj, uint32_t * lock_status);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_EjectCard(SDMMC_BLOCK_t *const obj);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_EraseBlock(const SDMMC_BLOCK_t *const obj,
                                                     const uint32_t start_address,
                                                     const uint32_t end_address);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetSectorSize(const SDMMC_BLOCK_t *const obj, void *sector_size);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetCardType(const SDMMC_BLOCK_t *const obj, void *card_type);

#ifdef __cplusplus
}
#endif

#endif /* SDMMC_BLOCK_SPI */

#endif /* SDMMC_BLOCK_SPI_H */
